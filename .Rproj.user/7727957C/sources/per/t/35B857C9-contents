shinyServer(function(input,output){
  showNotification("Credit = Dedy Gusnadi Sianipar", duration = NULL, type = "message",closeButton = TRUE)
# personal tab -----------------------------------------------------------------
  
  output$lineprovinsi <- renderPlotly({
    temp <- covid19fix %>%
      filter(Provinsi %in% c(input$provi)) %>%
      select(Total.Cases, Total.Recovered, Total.Deaths, Total.Active.Cases,Date,Provinsi) %>%
      pivot_longer(cols = c("Total.Cases","Total.Deaths","Total.Recovered","Total.Active.Cases")) %>%
      filter(name %in% input$boxcategory) %>%
      ggplot(aes(x= Date, y = value,fill = Provinsi ))+
      geom_area(aes(group= name), alpha=0.8)+
      facet_wrap(~name, scales = "free_y")+
      theme_dark()+
      labs(x="",y="")+
      theme(plot.background = element_rect(fill = '#000000',color = "red"))+
      theme(panel.background = element_rect(fill = '#000000', colour = 'red'))+
      theme(axis.text.x = element_text(color = "white"),
            axis.text.y = element_text(color = "white" ),
            axis.title.x = element_text(color = "white"),
            axis.title.y = element_text(color = "white"))
    
    ggplotly(temp) %>% 
      layout(legend=list(orientation = "h", x =0.27,y =-0.2))
    
  })
  
  output$mapindo <- renderHighchart({
    hcmap(
      map = "countries/id/id-all",
      data = map_indo,
      value = "kasus",
      name = "Confirmed Cases",
      dataLabels = list(enabled = TRUE, format = '{point.name}'),
      borderColor = "black",
      borderWidth = 0.1,
      tooltip = list(valueDecimals = 0)
    ) %>%
      hc_add_theme(hc_theme_db()) %>%
      hc_colorAxis(minColor = "white",
                   maxColor = "red",
                   type = "logarithmic") %>%
      hc_exporting(enabled = TRUE) %>%
      hc_title(text = "Mapping Cumulative Confirmed Cases by Country") %>%
      #hc_subtitle(text = paste("Updated:", Sys.time())) %>%
      hc_mapNavigation(enabled = TRUE)
  })
  
  output$mapindoA <- renderHighchart({
    hcmap(
      map = "countries/id/id-all",
      data = map_indoA,
      value = "kasus",
      name = "Kasus Aktif",
      dataLabels = list(enabled = TRUE, format = '{point.name}'),
      borderColor = "black",
      borderWidth = 0.1,
      tooltip = list(valueDecimals = 0)
    ) %>%
      hc_add_theme(hc_theme_db()) %>%
      hc_colorAxis(minColor = "white",
                   maxColor = "blue",
                   type = "logarithmic") %>%
      hc_exporting(enabled = TRUE) %>%
      hc_title(text = "Mapping Cumulative Active Cases by Country") %>%
      #hc_subtitle(text = paste("Updated:", Sys.time())) %>%
      hc_mapNavigation(enabled = TRUE)
  })
  
  output$mapindoR <- renderHighchart({
    hcmap(
      map = "countries/id/id-all",
      data = map_indoR,
      value = "kasus",
      name = "Selamat",
      dataLabels = list(enabled = TRUE, format = '{point.name}'),
      borderColor = "black",
      borderWidth = 0.1,
      tooltip = list(valueDecimals = 0)
    ) %>%
      hc_add_theme(hc_theme_db()) %>%
      hc_colorAxis(minColor = "white",
                   maxColor = "green",
                   type = "logarithmic") %>%
      hc_exporting(enabled = TRUE) %>%
      hc_title(text = "Mapping Cumulative Recovered Cases by Country") %>%
      #hc_subtitle(text = paste("Updated:", Sys.time())) %>%
      hc_mapNavigation(enabled = TRUE)
  })
  
  output$mapindoD <- renderHighchart({
    hcmap(
      map = "countries/id/id-all",
      data = map_indoD,
      value = "kasus",
      name = "Kematian",
      dataLabels = list(enabled = TRUE, format = '{point.name}'),
      borderColor = "black",
      borderWidth = 0.1,
      tooltip = list(valueDecimals = 0)
    ) %>%
      hc_add_theme(hc_theme_db()) %>%
      hc_colorAxis(minColor = "white",
                   maxColor = "black",
                   type = "logarithmic") %>%
      hc_exporting(enabled = TRUE) %>%
      hc_title(text = "Mapping Cumulative Death Cases by Country") %>%
      #hc_subtitle(text = paste("Updated:", Sys.time())) %>%
      hc_mapNavigation(enabled = TRUE)
  })
  # side 3------------------------------------------------------------------------
  output$covid19f <- renderDataTable({
    covid19fix %>%
      arrange(desc(Date)) %>%
      select(!c(Location.Level,Latitude,Longitude))
  })
})
